//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.4.2
//     from Assets/Manette.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @Manette : IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @Manette()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""Manette"",
    ""maps"": [
        {
            ""name"": ""Player"",
            ""id"": ""7823de46-7683-4437-acae-5c82dec4cc79"",
            ""actions"": [
                {
                    ""name"": ""Move"",
                    ""type"": ""Value"",
                    ""id"": ""52dc9b2e-505d-452a-9abb-62f5420460d2"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Button up"",
                    ""type"": ""Button"",
                    ""id"": ""ae6b2b56-d6cd-4db9-b574-5c60091e5fb3"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Button down"",
                    ""type"": ""Button"",
                    ""id"": ""fe06265c-5582-4612-a541-467dc1be063e"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Button left"",
                    ""type"": ""Button"",
                    ""id"": ""91142c63-9e7e-4ffc-aa57-8258277eb2f1"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Button right"",
                    ""type"": ""Button"",
                    ""id"": ""8d58e220-71d6-43eb-8221-44d1dd7090c8"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""978bfe49-cc26-4a3d-ab7b-7d7a29327403"",
                    ""path"": ""<Gamepad>/leftStick"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": "";Gamepad"",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""ca85ad34-c8cc-4c11-b352-de56fa01c294"",
                    ""path"": ""<Gamepad>/dpad"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Gamepad"",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""1635d3fe-58b6-4ba9-a4e2-f4b964f6b5c8"",
                    ""path"": ""<XRController>/{Primary2DAxis}"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""XR"",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""3c0d6b61-8cc3-408f-8c24-d1e31d3fb9ec"",
                    ""path"": ""<Gamepad>/buttonNorth"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Gamepad;XR"",
                    ""action"": ""Button up"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""6071ff39-026a-4e2e-b167-762c8639c0fd"",
                    ""path"": ""<Gamepad>/buttonSouth"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Gamepad;XR"",
                    ""action"": ""Button down"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""cde38f29-1bfa-4541-bb5d-8a9b1ace5c57"",
                    ""path"": ""<Gamepad>/buttonWest"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Gamepad;XR"",
                    ""action"": ""Button left"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""f6cbabfd-7fc7-4641-a187-fcc007729ee8"",
                    ""path"": ""<Gamepad>/buttonEast"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Gamepad;XR"",
                    ""action"": ""Button right"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": [
        {
            ""name"": ""Keyboard&Mouse"",
            ""bindingGroup"": ""Keyboard&Mouse"",
            ""devices"": [
                {
                    ""devicePath"": ""<Keyboard>"",
                    ""isOptional"": false,
                    ""isOR"": false
                },
                {
                    ""devicePath"": ""<Mouse>"",
                    ""isOptional"": false,
                    ""isOR"": false
                }
            ]
        },
        {
            ""name"": ""Gamepad"",
            ""bindingGroup"": ""Gamepad"",
            ""devices"": [
                {
                    ""devicePath"": ""<Gamepad>"",
                    ""isOptional"": false,
                    ""isOR"": false
                }
            ]
        },
        {
            ""name"": ""Touch"",
            ""bindingGroup"": ""Touch"",
            ""devices"": [
                {
                    ""devicePath"": ""<Touchscreen>"",
                    ""isOptional"": false,
                    ""isOR"": false
                }
            ]
        },
        {
            ""name"": ""Joystick"",
            ""bindingGroup"": ""Joystick"",
            ""devices"": [
                {
                    ""devicePath"": ""<Joystick>"",
                    ""isOptional"": false,
                    ""isOR"": false
                }
            ]
        },
        {
            ""name"": ""XR"",
            ""bindingGroup"": ""XR"",
            ""devices"": [
                {
                    ""devicePath"": ""<XRController>"",
                    ""isOptional"": false,
                    ""isOR"": false
                }
            ]
        }
    ]
}");
        // Player
        m_Player = asset.FindActionMap("Player", throwIfNotFound: true);
        m_Player_Move = m_Player.FindAction("Move", throwIfNotFound: true);
        m_Player_Buttonup = m_Player.FindAction("Button up", throwIfNotFound: true);
        m_Player_Buttondown = m_Player.FindAction("Button down", throwIfNotFound: true);
        m_Player_Buttonleft = m_Player.FindAction("Button left", throwIfNotFound: true);
        m_Player_Buttonright = m_Player.FindAction("Button right", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }
    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }
    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // Player
    private readonly InputActionMap m_Player;
    private IPlayerActions m_PlayerActionsCallbackInterface;
    private readonly InputAction m_Player_Move;
    private readonly InputAction m_Player_Buttonup;
    private readonly InputAction m_Player_Buttondown;
    private readonly InputAction m_Player_Buttonleft;
    private readonly InputAction m_Player_Buttonright;
    public struct PlayerActions
    {
        private @Manette m_Wrapper;
        public PlayerActions(@Manette wrapper) { m_Wrapper = wrapper; }
        public InputAction @Move => m_Wrapper.m_Player_Move;
        public InputAction @Buttonup => m_Wrapper.m_Player_Buttonup;
        public InputAction @Buttondown => m_Wrapper.m_Player_Buttondown;
        public InputAction @Buttonleft => m_Wrapper.m_Player_Buttonleft;
        public InputAction @Buttonright => m_Wrapper.m_Player_Buttonright;
        public InputActionMap Get() { return m_Wrapper.m_Player; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(PlayerActions set) { return set.Get(); }
        public void SetCallbacks(IPlayerActions instance)
        {
            if (m_Wrapper.m_PlayerActionsCallbackInterface != null)
            {
                @Move.started -= m_Wrapper.m_PlayerActionsCallbackInterface.OnMove;
                @Move.performed -= m_Wrapper.m_PlayerActionsCallbackInterface.OnMove;
                @Move.canceled -= m_Wrapper.m_PlayerActionsCallbackInterface.OnMove;
                @Buttonup.started -= m_Wrapper.m_PlayerActionsCallbackInterface.OnButtonup;
                @Buttonup.performed -= m_Wrapper.m_PlayerActionsCallbackInterface.OnButtonup;
                @Buttonup.canceled -= m_Wrapper.m_PlayerActionsCallbackInterface.OnButtonup;
                @Buttondown.started -= m_Wrapper.m_PlayerActionsCallbackInterface.OnButtondown;
                @Buttondown.performed -= m_Wrapper.m_PlayerActionsCallbackInterface.OnButtondown;
                @Buttondown.canceled -= m_Wrapper.m_PlayerActionsCallbackInterface.OnButtondown;
                @Buttonleft.started -= m_Wrapper.m_PlayerActionsCallbackInterface.OnButtonleft;
                @Buttonleft.performed -= m_Wrapper.m_PlayerActionsCallbackInterface.OnButtonleft;
                @Buttonleft.canceled -= m_Wrapper.m_PlayerActionsCallbackInterface.OnButtonleft;
                @Buttonright.started -= m_Wrapper.m_PlayerActionsCallbackInterface.OnButtonright;
                @Buttonright.performed -= m_Wrapper.m_PlayerActionsCallbackInterface.OnButtonright;
                @Buttonright.canceled -= m_Wrapper.m_PlayerActionsCallbackInterface.OnButtonright;
            }
            m_Wrapper.m_PlayerActionsCallbackInterface = instance;
            if (instance != null)
            {
                @Move.started += instance.OnMove;
                @Move.performed += instance.OnMove;
                @Move.canceled += instance.OnMove;
                @Buttonup.started += instance.OnButtonup;
                @Buttonup.performed += instance.OnButtonup;
                @Buttonup.canceled += instance.OnButtonup;
                @Buttondown.started += instance.OnButtondown;
                @Buttondown.performed += instance.OnButtondown;
                @Buttondown.canceled += instance.OnButtondown;
                @Buttonleft.started += instance.OnButtonleft;
                @Buttonleft.performed += instance.OnButtonleft;
                @Buttonleft.canceled += instance.OnButtonleft;
                @Buttonright.started += instance.OnButtonright;
                @Buttonright.performed += instance.OnButtonright;
                @Buttonright.canceled += instance.OnButtonright;
            }
        }
    }
    public PlayerActions @Player => new PlayerActions(this);
    private int m_KeyboardMouseSchemeIndex = -1;
    public InputControlScheme KeyboardMouseScheme
    {
        get
        {
            if (m_KeyboardMouseSchemeIndex == -1) m_KeyboardMouseSchemeIndex = asset.FindControlSchemeIndex("Keyboard&Mouse");
            return asset.controlSchemes[m_KeyboardMouseSchemeIndex];
        }
    }
    private int m_GamepadSchemeIndex = -1;
    public InputControlScheme GamepadScheme
    {
        get
        {
            if (m_GamepadSchemeIndex == -1) m_GamepadSchemeIndex = asset.FindControlSchemeIndex("Gamepad");
            return asset.controlSchemes[m_GamepadSchemeIndex];
        }
    }
    private int m_TouchSchemeIndex = -1;
    public InputControlScheme TouchScheme
    {
        get
        {
            if (m_TouchSchemeIndex == -1) m_TouchSchemeIndex = asset.FindControlSchemeIndex("Touch");
            return asset.controlSchemes[m_TouchSchemeIndex];
        }
    }
    private int m_JoystickSchemeIndex = -1;
    public InputControlScheme JoystickScheme
    {
        get
        {
            if (m_JoystickSchemeIndex == -1) m_JoystickSchemeIndex = asset.FindControlSchemeIndex("Joystick");
            return asset.controlSchemes[m_JoystickSchemeIndex];
        }
    }
    private int m_XRSchemeIndex = -1;
    public InputControlScheme XRScheme
    {
        get
        {
            if (m_XRSchemeIndex == -1) m_XRSchemeIndex = asset.FindControlSchemeIndex("XR");
            return asset.controlSchemes[m_XRSchemeIndex];
        }
    }
    public interface IPlayerActions
    {
        void OnMove(InputAction.CallbackContext context);
        void OnButtonup(InputAction.CallbackContext context);
        void OnButtondown(InputAction.CallbackContext context);
        void OnButtonleft(InputAction.CallbackContext context);
        void OnButtonright(InputAction.CallbackContext context);
    }
}
